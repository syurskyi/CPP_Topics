// 007_This file was GENERATED by command:
//     pump.py gmock-generated-internal-utils.h.pump
// DO NOT EDIT BY HAND!!!

// Copyright 2007, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Author: wan@google.com (Zhanyong Wan)

// Google Mock - a framework for writing C++ mock classes.
//
// 007_This file contains template meta-programming utility classes needed
// for implementing Google Mock.

?i.. GMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_GENERATED_INTERNAL_UTILS_H_
_de.. GMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_GENERATED_INTERNAL_UTILS_H_

? "gmock/internal/gmock-port.h"

n... testing {

template <typename T>
n.. Matcher;

n... internal {

// An IgnoredValue object can be implicitly constructed from ANY value.
// 007_This is used in implementing the IgnoreResult(a) action.
n.. IgnoredValue {
 p..
  // 007_This constructor template allows any value to be implicitly
  // converted to IgnoredValue.  The object has no data member and
  // doesn't try to remember anything about the argument.  We
  // deliberately omit the 'explicit' keyword in order to allow the
  // conversion to be implicit.
  template <typename T>
  IgnoredValue(co.. T& /* ignored */) {}  // NOLINT(runtime/explicit)
};

// MatcherTuple<T>::type is a tuple type where each field is a Matcher
// for the corresponding field in tuple type T.
template <typename Tuple>
s.. MatcherTuple;

template <>
s.. MatcherTuple< ::testing::tuple<> > {
  t_d_ ::testing::tuple< > type;
};

template <typename A1>
s.. MatcherTuple< ::testing::tuple<A1> > {
  t_d_ ::testing::tuple<Matcher<A1> > type;
};

template <typename A1, typename A2>
s.. MatcherTuple< ::testing::tuple<A1, A2> > {
  t_d_ ::testing::tuple<Matcher<A1>, Matcher<A2> > type;
};

template <typename A1, typename A2, typename A3>
s.. MatcherTuple< ::testing::tuple<A1, A2, A3> > {
  t_d_ ::testing::tuple<Matcher<A1>, Matcher<A2>, Matcher<A3> > type;
};

template <typename A1, typename A2, typename A3, typename A4>
s.. MatcherTuple< ::testing::tuple<A1, A2, A3, A4> > {
  t_d_ ::testing::tuple<Matcher<A1>, Matcher<A2>, Matcher<A3>, Matcher<A4> >
      type;
};

template <typename A1, typename A2, typename A3, typename A4, typename A5>
s.. MatcherTuple< ::testing::tuple<A1, A2, A3, A4, A5> > {
  t_d_ ::testing::tuple<Matcher<A1>, Matcher<A2>, Matcher<A3>, Matcher<A4>,
                           Matcher<A5> >
      type;
};

template <typename A1, typename A2, typename A3, typename A4, typename A5,
    typename A6>
s.. MatcherTuple< ::testing::tuple<A1, A2, A3, A4, A5, A6> > {
  t_d_ ::testing::tuple<Matcher<A1>, Matcher<A2>, Matcher<A3>, Matcher<A4>,
                           Matcher<A5>, Matcher<A6> >
      type;
};

template <typename A1, typename A2, typename A3, typename A4, typename A5,
    typename A6, typename A7>
s.. MatcherTuple< ::testing::tuple<A1, A2, A3, A4, A5, A6, A7> > {
  t_d_ ::testing::tuple<Matcher<A1>, Matcher<A2>, Matcher<A3>, Matcher<A4>,
                           Matcher<A5>, Matcher<A6>, Matcher<A7> >
      type;
};

template <typename A1, typename A2, typename A3, typename A4, typename A5,
    typename A6, typename A7, typename A8>
s.. MatcherTuple< ::testing::tuple<A1, A2, A3, A4, A5, A6, A7, A8> > {
  t_d_ ::testing::tuple<Matcher<A1>, Matcher<A2>, Matcher<A3>, Matcher<A4>,
                           Matcher<A5>, Matcher<A6>, Matcher<A7>, Matcher<A8> >
      type;
};

template <typename A1, typename A2, typename A3, typename A4, typename A5,
    typename A6, typename A7, typename A8, typename A9>
s.. MatcherTuple< ::testing::tuple<A1, A2, A3, A4, A5, A6, A7, A8, A9> > {
  t_d_ ::testing::tuple<Matcher<A1>, Matcher<A2>, Matcher<A3>, Matcher<A4>,
                           Matcher<A5>, Matcher<A6>, Matcher<A7>, Matcher<A8>,
                           Matcher<A9> >
      type;
};

template <typename A1, typename A2, typename A3, typename A4, typename A5,
    typename A6, typename A7, typename A8, typename A9, typename A10>
s.. MatcherTuple< ::testing::tuple<A1, A2, A3, A4, A5, A6, A7, A8, A9,
    A10> > {
  t_d_ ::testing::tuple<Matcher<A1>, Matcher<A2>, Matcher<A3>, Matcher<A4>,
                           Matcher<A5>, Matcher<A6>, Matcher<A7>, Matcher<A8>,
                           Matcher<A9>, Matcher<A10> >
      type;
};

// Template struct Function<F>, where F must be a function type, contains
// the following typedefs:
//
//   Result:               the function's return type.
//   ArgumentN:            the type of the N-th argument, where N starts with 1.
//   ArgumentTuple:        the tuple type consisting of all parameters of F.
//   ArgumentMatcherTuple: the tuple type consisting of Matchers for all
//                         parameters of F.
//   MakeResultVoid:       the function type obtained by substituting void
//                         for the return type of F.
//   MakeResultIgnoredValue:
//                         the function type obtained by substituting Something
//                         for the return type of F.
template <typename F>
s.. Function;

template <typename R>
s.. Function<R()> {
  t_d_ R Result;
  t_d_ ::testing::tuple<> ArgumentTuple;
  t_d_ typename MatcherTuple<ArgumentTuple>::type ArgumentMatcherTuple;
  t_d_ v.. MakeResultVoid();
  t_d_ IgnoredValue MakeResultIgnoredValue();
};

template <typename R, typename A1>
s.. Function<R(A1)>
    : Function<R()> {
  t_d_ A1 Argument1;
  t_d_ ::testing::tuple<A1> ArgumentTuple;
  t_d_ typename MatcherTuple<ArgumentTuple>::type ArgumentMatcherTuple;
  t_d_ v.. MakeResultVoid(A1);
  t_d_ IgnoredValue MakeResultIgnoredValue(A1);
};

template <typename R, typename A1, typename A2>
s.. Function<R(A1, A2)>
    : Function<R(A1)> {
  t_d_ A2 Argument2;
  t_d_ ::testing::tuple<A1, A2> ArgumentTuple;
  t_d_ typename MatcherTuple<ArgumentTuple>::type ArgumentMatcherTuple;
  t_d_ v.. MakeResultVoid(A1, A2);
  t_d_ IgnoredValue MakeResultIgnoredValue(A1, A2);
};

template <typename R, typename A1, typename A2, typename A3>
s.. Function<R(A1, A2, A3)>
    : Function<R(A1, A2)> {
  t_d_ A3 Argument3;
  t_d_ ::testing::tuple<A1, A2, A3> ArgumentTuple;
  t_d_ typename MatcherTuple<ArgumentTuple>::type ArgumentMatcherTuple;
  t_d_ v.. MakeResultVoid(A1, A2, A3);
  t_d_ IgnoredValue MakeResultIgnoredValue(A1, A2, A3);
};

template <typename R, typename A1, typename A2, typename A3, typename A4>
s.. Function<R(A1, A2, A3, A4)>
    : Function<R(A1, A2, A3)> {
  t_d_ A4 Argument4;
  t_d_ ::testing::tuple<A1, A2, A3, A4> ArgumentTuple;
  t_d_ typename MatcherTuple<ArgumentTuple>::type ArgumentMatcherTuple;
  t_d_ v.. MakeResultVoid(A1, A2, A3, A4);
  t_d_ IgnoredValue MakeResultIgnoredValue(A1, A2, A3, A4);
};

template <typename R, typename A1, typename A2, typename A3, typename A4,
    typename A5>
s.. Function<R(A1, A2, A3, A4, A5)>
    : Function<R(A1, A2, A3, A4)> {
  t_d_ A5 Argument5;
  t_d_ ::testing::tuple<A1, A2, A3, A4, A5> ArgumentTuple;
  t_d_ typename MatcherTuple<ArgumentTuple>::type ArgumentMatcherTuple;
  t_d_ v.. MakeResultVoid(A1, A2, A3, A4, A5);
  t_d_ IgnoredValue MakeResultIgnoredValue(A1, A2, A3, A4, A5);
};

template <typename R, typename A1, typename A2, typename A3, typename A4,
    typename A5, typename A6>
s.. Function<R(A1, A2, A3, A4, A5, A6)>
    : Function<R(A1, A2, A3, A4, A5)> {
  t_d_ A6 Argument6;
  t_d_ ::testing::tuple<A1, A2, A3, A4, A5, A6> ArgumentTuple;
  t_d_ typename MatcherTuple<ArgumentTuple>::type ArgumentMatcherTuple;
  t_d_ v.. MakeResultVoid(A1, A2, A3, A4, A5, A6);
  t_d_ IgnoredValue MakeResultIgnoredValue(A1, A2, A3, A4, A5, A6);
};

template <typename R, typename A1, typename A2, typename A3, typename A4,
    typename A5, typename A6, typename A7>
s.. Function<R(A1, A2, A3, A4, A5, A6, A7)>
    : Function<R(A1, A2, A3, A4, A5, A6)> {
  t_d_ A7 Argument7;
  t_d_ ::testing::tuple<A1, A2, A3, A4, A5, A6, A7> ArgumentTuple;
  t_d_ typename MatcherTuple<ArgumentTuple>::type ArgumentMatcherTuple;
  t_d_ v.. MakeResultVoid(A1, A2, A3, A4, A5, A6, A7);
  t_d_ IgnoredValue MakeResultIgnoredValue(A1, A2, A3, A4, A5, A6, A7);
};

template <typename R, typename A1, typename A2, typename A3, typename A4,
    typename A5, typename A6, typename A7, typename A8>
s.. Function<R(A1, A2, A3, A4, A5, A6, A7, A8)>
    : Function<R(A1, A2, A3, A4, A5, A6, A7)> {
  t_d_ A8 Argument8;
  t_d_ ::testing::tuple<A1, A2, A3, A4, A5, A6, A7, A8> ArgumentTuple;
  t_d_ typename MatcherTuple<ArgumentTuple>::type ArgumentMatcherTuple;
  t_d_ v.. MakeResultVoid(A1, A2, A3, A4, A5, A6, A7, A8);
  t_d_ IgnoredValue MakeResultIgnoredValue(A1, A2, A3, A4, A5, A6, A7, A8);
};

template <typename R, typename A1, typename A2, typename A3, typename A4,
    typename A5, typename A6, typename A7, typename A8, typename A9>
s.. Function<R(A1, A2, A3, A4, A5, A6, A7, A8, A9)>
    : Function<R(A1, A2, A3, A4, A5, A6, A7, A8)> {
  t_d_ A9 Argument9;
  t_d_ ::testing::tuple<A1, A2, A3, A4, A5, A6, A7, A8, A9> ArgumentTuple;
  t_d_ typename MatcherTuple<ArgumentTuple>::type ArgumentMatcherTuple;
  t_d_ v.. MakeResultVoid(A1, A2, A3, A4, A5, A6, A7, A8, A9);
  t_d_ IgnoredValue MakeResultIgnoredValue(A1, A2, A3, A4, A5, A6, A7, A8,
      A9);
};

template <typename R, typename A1, typename A2, typename A3, typename A4,
    typename A5, typename A6, typename A7, typename A8, typename A9,
    typename A10>
s.. Function<R(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)>
    : Function<R(A1, A2, A3, A4, A5, A6, A7, A8, A9)> {
  t_d_ A10 Argument10;
  t_d_ ::testing::tuple<A1, A2, A3, A4, A5, A6, A7, A8, A9,
      A10> ArgumentTuple;
  t_d_ typename MatcherTuple<ArgumentTuple>::type ArgumentMatcherTuple;
  t_d_ v.. MakeResultVoid(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10);
  t_d_ IgnoredValue MakeResultIgnoredValue(A1, A2, A3, A4, A5, A6, A7, A8,
      A9, A10);
};

}  // namespace internal

}  // namespace testing

e..  // GMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_GENERATED_INTERNAL_UTILS_H_
